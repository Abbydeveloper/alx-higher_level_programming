=================
100-matrix_mul.py
=================

Module defines a matrix multiplication function

Uses
====

```lazy_matrix_mul(m_a, m_b)``` returns a new matrix representing the multiplication of the arguments m_a and m_b



::

	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

	>>> m_a = [
	... [1, 2],
	... [3,4]
	... ]
	>>> m_b = m_a
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[ 7 10]
	 [15 22]]

Raise TypeError is any of the arguments are missing

::


	>>> print(lazy_matrix_mul())
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


If the column count of m_a does not equal the row count of m_b, raise ValueError


::

	>>> m_a = [
	... [1, 2],
	... [3, 4]
	... ]
	>>> m_b = [
	... [5, 6],
	... [7, 8],
	... [9, 0]
	... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


Neither m_a or m_b must be empty

::
	>>> m_a = [[]]
	>>> m_b = [[2, 1], [3, 4]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

::

	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)



m_a and m_b must be lists and lists of lists


::

	>>> print(lazy_matrix_mul('str', [[2, 3]]))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

::

	>>> print(lazy_matrix_mul([[1,3]], 'str'))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

::

	>>> print(lazy_matrix_mul([1, 4], [[1, 2]]))
	Traceback (most recent call last):
	ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

m_a and m_b must contain only integers or floats

	
::

	>>> print(lazy_matrix_mul([[1, 'str']], [[1, 3]]))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

::

	>>> print(lazy_matrix_mul([[1,2]], [[1, 'str']]))
	Traceback (most recent call last):
	ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

The length of all rows in m_a and m_b should be equal. Raise a TpeError if otherwise


::


	>>> print(lazy_matrix_mul([[1, 2], [1, 4, 3]], [[1, 2]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.


::

	>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [1, 3, 5]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.
