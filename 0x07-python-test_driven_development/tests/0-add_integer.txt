===============
0-add_integer.py
===============

Define a function to add integers
```add_integer(a, b=98)```


Usage
=====

```ad_integer(a, b=98)``` returns the addition of two numbers

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

::

	>>> add_integer(2, -3)
	-1

The function also adds floating point numbers

::

	>>> add_integer(2.0, 3.0)
	5

N.B Floating numbers are casted to integers before being added

::

	>>> add_integer(2.9, 0.2)
	2

::

	>>> add_integer(-2.9, -0.2)
	-2

Integers and Floating numbers can be added together

::

	>>> add_integer(20.4, 4)
	24

The second argument has a default value, and so is optional

::
	>>> add_integer(5)
	103

Edge cases
==========

```add_integer() expects both arguments to be either integers or floating numbers. Raise a TypeError if this condition is not met

::

	>>> add_integer('string', 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(3, 'string')
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(3, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

The function will fall if infinity is provided

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(4, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer


The function will fail if NaN is provided is arguments

::
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(6, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
